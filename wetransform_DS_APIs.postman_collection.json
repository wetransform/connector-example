{
	"info": {
		"_postman_id": "a44bc408-e11e-4b30-8b6c-44f01bad5e14",
		"name": "wetransform DS APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9841066"
	},
	"item": [
		{
			"name": "Seed",
			"item": [
				{
					"name": "Create Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"ASSET_ID\", pm.response.json()[\"@id\"])",
									"console.log(\"asset id: \" + pm.environment.get(\"ASSET_ID\"))",
									"",
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									"pm.test(\"Contract negotiation id is set\", function(){",
									"    pm.expect(pm.environment.get(\"CONTRACT_NEGOTIATION_ID\")).not.to.be.undefined",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n    },\n    \"@id\": \"{{$guid}}\",\n    \"dataAddress\": {\n        \"@type\": \"HttpData\",\n        \"baseUrl\": \"https://test.haleconnect.de/ows/datasets/org.762.6955d69f-5e3a-446c-98cb-0c3b6ae119fd_ogcapi\",\n        \"proxyBody\": \"false\",\n        \"proxyMethod\": \"false\",\n        \"proxyPath\": \"false\",\n        \"proxyQueryParams\": \"false\",\n        \"type\": \"HttpData\"\n    },\n    \"privateProperties\": {\n         \"https://w3id.org/edc/v0.0.1/ns/tenantId\": \"default\"\n    },\n    \"properties\": {\n        \"contenttype\": \"application/json\",\n        \"description\": \"Tolle Description hier\",\n        \"name\": \"OGC API test Asset 22\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROVIDER_HOST}}/management/v3/assets",
							"host": [
								"{{PROVIDER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RoleAndGeometry policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"POLICY_ID\", pm.response.json()[\"@id\"])",
									"console.log(\"Policy ID: \" + pm.environment.get(\"POLICY_ID\"))",
									"",
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									"pm.test(\"Contract negotiation id is set\", function(){",
									"    pm.expect(pm.environment.get(\"CONTRACT_NEGOTIATION_ID\")).not.to.be.undefined",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"privateProperties\": {\n        \"name\": \"rolesAndGeometryPolicy 22\"\n    },\n    \"policy\": {\n        \"@type\": \"odrl:Set\",\n        \"odrl:permission\": [\n            {\n                \"odrl:action\": {\n                    \"@id\": \"odrl:use\"\n                },\n                \"odrl:constraint\": [\n                    {\n                        \"@type\": \"AtomicConstraint\",\n                        \"odrl:leftOperand\": {\n                            \"@id\": \"edc:wetransform_role\"\n                        },\n                        \"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n                        \"odrl:rightOperand\": \"forest-data-holder\"\n                    }\n                ]\n            },\n            {\n                \"odrl:action\": {\n                    \"@id\": \"odrl:use\"\n                },\n                \"odrl:constraint\": [\n                    {\n                        \"@type\": \"AtomicConstraint\",\n                        \"odrl:leftOperand\": {\n                            \"@id\": \"edc:geofence\"\n                        },\n                        \"odrl:operator\": {\n                            \"@id\": \"odrl:isPartOf\"\n                        },\n                        \"odrl:rightOperand\": {\n                            \"@value\": \"POLYGON ((8.5122367 48.4050197, 8.5303739 48.4004456, 8.5452819 48.4049379, 8.5646695 48.4000718, 8.5742973 48.4037735, 8.5951711 48.4100551, 8.6058205 48.3959917, 8.640327 48.4023885, 8.6554981 48.3945554, 8.6763373 48.4002011, 8.690371 48.3870313, 8.7368658 48.3767577, 8.7573319 48.3816695, 8.7491462 48.3904705, 8.7662151 48.4102384, 8.7716523 48.4162141, 8.7774047 48.4216732, 8.7647081 48.4272574, 8.7700895 48.4378735, 8.7807461 48.4384805, 8.7838505 48.4470819, 8.8106491 48.4583053, 8.8278819 48.4624796, 8.8207844 48.4698998, 8.8135611 48.4683599, 8.7942659 48.4849005, 8.7775698 48.485694, 8.7685666 48.5011402, 8.7561926 48.5035272, 8.7388702 48.5042241, 8.7345171 48.4876054, 8.6934784 48.4839745, 8.6726588 48.5103278, 8.6358459 48.5001974, 8.6068298 48.5043549, 8.5994045 48.5109871, 8.6054351 48.5239125, 8.6307042 48.5369528, 8.6194458 48.5421278, 8.6030343 48.5484183, 8.595801 48.5539429, 8.5867553 48.5451698, 8.5592629 48.5497376, 8.5783164 48.5657932, 8.575655 48.5769189, 8.5620064 48.5686753, 8.5386884 48.5876164, 8.5024878 48.592949, 8.4726257 48.6115764, 8.4670379 48.6060137, 8.4497578 48.6200691, 8.4192114 48.635585, 8.4094455 48.6331536, 8.4098611 48.6396026, 8.3884671 48.6364986, 8.3878245 48.623547, 8.3507285 48.6089112, 8.3593948 48.6000019, 8.3203406 48.5885893, 8.2636952 48.5892507, 8.2224609 48.6028322, 8.2099619 48.6014993, 8.2368901 48.5762915, 8.2281589 48.5629062, 8.2126327 48.5575666, 8.2208895 48.5496582, 8.2135455 48.5467629, 8.2190084 48.5371417, 8.2117129 48.5222734, 8.2214392 48.5033486, 8.2413375 48.4929768, 8.2660383 48.4904497, 8.2703331 48.4793728, 8.2650883 48.4362574, 8.2554476 48.4337513, 8.2551456 48.413533, 8.2413458 48.4112725, 8.2336501 48.4015168, 8.2461862 48.3947751, 8.2474793 48.3848707, 8.2631411 48.3793245, 8.2517313 48.3646195, 8.2911897 48.3573932, 8.300771 48.3494533, 8.3178201 48.3567449, 8.3148684 48.3663379, 8.3297396 48.3865461, 8.360019 48.3765955, 8.3552949 48.3670054, 8.3631506 48.3348403, 8.40395 48.3223928, 8.4316319 48.3227036, 8.4447319 48.3010528, 8.4585669 48.3130478, 8.4943193 48.3138392, 8.4996526 48.3272111, 8.501353 48.3314871, 8.4850071 48.3337349, 8.4849778 48.3416672, 8.4716216 48.3459014, 8.5031057 48.3573319, 8.4861197 48.36805, 8.4847136 48.3818845, 8.5202328 48.3879472, 8.5122367 48.4050197))\"\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROVIDER_HOST}}/management/v3/policydefinitions",
							"host": [
								"{{PROVIDER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"policydefinitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create asset1 contract definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');",
									"var myUuid = uuid.v4();",
									"console.log(\"+++++++ my uuid: \", myUuid);",
									"pm.environment.set(\"RANDOM_UUID\", myUuid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"@id\": \"{{$guid}}\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"{{POLICY_ID}}\",\n    \"assetsSelector\": [\n        {\n            \"@type\": \"Criterion\",\n            \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n            \"operator\": \"=\",\n            \"operandRight\": \"{{ASSET_ID}}\"\n            \n        }\n    ],\n    \"contractPolicyId\": \"{{POLICY_ID}}\",\n   \"privateProperties\": {\n        \"https://w3id.org/edc/v0.0.1/ns/tenantId\": \"default\",\n        \"name\": \"contract Test 22\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROVIDER_HOST}}/management/v3/contractdefinitions",
							"host": [
								"{{PROVIDER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"contractdefinitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"ASSET2_ID\", pm.response.json()[\"@id\"])",
									"",
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									"pm.test(\"Contract negotiation id is set\", function(){",
									"    pm.expect(pm.environment.get(\"CONTRACT_NEGOTIATION_ID\")).not.to.be.undefined",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"@id\": \"{{$guid}}\",\n    \"@type\": \"Asset\",\n    \"dataAddress\": {\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"http://geodata/Windenergieanlagen_KreisGT_EPSG3857_GEOJSON.geojson\",\n        \"proxyBody\": \"false\",\n        \"proxyMethod\": \"false\",\n        \"proxyPath\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"type\": \"HttpData\"\n    },\n    \"privateProperties\": {\n        \"tenantId\": \"default\"\n    },\n    \"properties\": {\n        \"contenttype\": \"application/json\",\n        \"description\": \"Tolle Description hier\",\n        \"id\": \"554468b1-f28b-4c1c-990c-d2dab2f2a432\",\n        \"name\": \"Windenergieanlagen\"\n    }\n}"
						},
						"url": {
							"raw": "{{PROVIDER_HOST}}/management/v3/assets",
							"host": [
								"{{PROVIDER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset1 Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"POLICY_ID\", pm.response.json()[\"@id\"])",
									"",
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									"pm.test(\"Contract negotiation id is set\", function(){",
									"    pm.expect(pm.environment.get(\"CONTRACT_NEGOTIATION_ID\")).not.to.be.undefined",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"createdAt\": 0,\n    \"@id\": \"564823ee-96bc-469c-927a-dd03d98b06c3\",\n    \"@type\": \"\",\n    \"policy\": {\n        \"@type\": \"odrl:Set\",\n        \"odrl:obligation\": [],\n        \"odrl:permission\": [],\n        \"odrl:prohibition\": []\n    },\n    \"privateProperties\": {\n        \"https://w3id.org/edc/v0.0.1/ns/tenantId\": \"default\",\n        \"name\": \"test\"\n    }\n}"
						},
						"url": {
							"raw": "{{PROVIDER_HOST}}/management/v3/policydefinitions",
							"host": [
								"{{PROVIDER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"policydefinitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset2 policy",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"createdAt\": 1747752331685,\n    \"@id\": \"de35267a-f4f4-4cea-a994-3741fd02ac71\",\n    \"@type\": \"PolicyDefinition\",\n    \"policy\": {\n        \"@id\": \"cf106f75-c8dd-442f-b6e6-e1c4ab64e39a\",\n        \"@type\": \"odrl:Set\",\n        \"odrl:obligation\": [],\n        \"odrl:permission\": [],\n        \"odrl:prohibition\": []\n    },\n    \"privateProperties\": {\n        \"name\": \"Policy\",\n        \"tenantId\": \"default\"\n    }\n}"
						},
						"url": {
							"raw": "{{HOST}}/management/v3/policydefinitions",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"management",
								"v3",
								"policydefinitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create \"require sensitive\" definition",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"@id\": \"5e51316a-6de0-4630-bcf9-144c217b1ad1\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"de35267a-f4f4-4cea-a994-3741fd02ac71\",\n    \"assetsSelector\": [\n        {\n            \"@type\": \"Criterion\",\n            \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n            \"operandRight\": \"554468b1-f28b-4c1c-990c-d2dab2f2a432\",\n            \"operator\": \"=\"\n        }\n    ],\n    \"contractPolicyId\": \"de35267a-f4f4-4cea-a994-3741fd02ac71\",\n    \"privateProperties\": {\n        \"name\": \"Contract\",\n        \"tenantId\": \"default\"\n    }\n}"
						},
						"url": {
							"raw": "{{PROVIDER_HOST}}/management/v3/contractdefinitions",
							"host": [
								"{{PROVIDER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"contractdefinitions"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is OK or conflict\", function() {",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 204, 409])",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "ControlPlane Management",
			"item": [
				{
					"name": "Get Assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									"",
									"var responseJson = pm.response.json();",
									"console.log(\"response : \" + responseJson )",
									"pm.environment.set(\"ASSET_ID\", \"554468b1-f28b-4c1c-990c-d2dab2f2a432\")",
									"pm.environment.set(\"ASSET_NAME\", \"Asset for Owner b\")",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n    },\n    \"@type\": \"QuerySpec\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROVIDER_HOST}}/management/v3/assets/request",
							"host": [
								"{{PROVIDER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"assets",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": [\n        \"https://w3id.org/edc/connector/management/v0.0.1\"\n    ],\n    \"@type\": \"CatalogRequest\",\n    \"counterPartyAddress\": \"{{PROVIDER_DSP_URL}}/protocol\",\n    \"protocol\": \"dataspace-protocol-http\",\n    \"querySpec\": {\n        \"offset\": 0,\n        \"limit\": 50\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONSUMER_HOST}}/management/v3/catalog/request",
							"host": [
								"{{CONSUMER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"catalog",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cached Catalogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get the policy id of \"asset-1\" and save it as an environment variable",
									"if(pm.response.code < 300 && pm.response.code >= 200){",
									"    if(pm.response.json().length > 0){",
									"        console.log(\"pm.response.json(): \", pm.response.json());",
									"        pm.response.json().forEach( item => {",
									"            var catalog = item[\"dcat:catalog\"]",
									"            if(catalog !=null) {",
									"                var dcatDataset = item[\"dcat:dataset\"]",
									"                if (Array.isArray(dcatDataset) && dcatDataset.length>0) {",
									"                    console.log(\"dcatdataset: \", dcatDataset)",
									"                    console.log(\"Asset ID defined in env variable: \" + pm.environment.get(\"ASSET_ID\"))",
									"                    console.log(\"asset name : \"+ pm.environment.get(\"ASSET_NAME\"))",
									"                    var asset_1 = dcatDataset.find((asset) => asset[\"@id\"] == pm.environment.get(\"ASSET_ID\"))",
									"                    if(asset_1 == null){",
									"                        console.log(\"asset_1 is null, extracting based on asset name defined in environment variable:  \" + pm.environment.get(\"ASSET_NAME\"))",
									"                    }",
									"                    asset_1 = dcatDataset.find((asset) => asset[\"name\"] == pm.environment.get(\"ASSET_NAME\"))",
									"                    console.log(\"asset_1 is: \", asset_1)",
									"                    pm.environment.set(\"POLICY_ID_ASSET\", asset_1[\"odrl:hasPolicy\"][\"@id\"]);",
									"                    console.log(\"POLICY_ID_ASSET:\", pm.environment.get(\"POLICY_ID_ASSET\"))",
									"                }",
									"                ",
									"            }",
									"        })",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									"pm.test(\"Policy id for asset 1 is set\", function(){",
									"    pm.expect(pm.environment.get(\"POLICY_ID_ASSET\")).not.to.be.undefined",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\"\n    },\n    \"@type\": \"QuerySpec\",\n    \"filterExpression\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONSUMER_CATALOG_QUERY_URL}}/catalog/v1alpha/catalog/query",
							"host": [
								"{{CONSUMER_CATALOG_QUERY_URL}}"
							],
							"path": [
								"catalog",
								"v1alpha",
								"catalog",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate negotiation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(!pm.environment.has(\"POLICY_ID_ASSET_1\")){",
									"    throw new Error('Policy-ID of Asset-1 is not yet available, please execute request \"Get Cached Catalog\" first!');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"CONTRACT_NEGOTIATION_ID\", pm.response.json()[\"@id\"])",
									"",
									"console.log(\"environment CONTRACT_NEGOTIATION_ID: \" + pm.environment.get(\"CONTRACT_NEGOTIATION_ID\"))",
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									"pm.test(\"Contract negotiation id is set\", function(){",
									"    pm.expect(pm.environment.get(\"CONTRACT_NEGOTIATION_ID\")).not.to.be.undefined",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"odrl\": \"http://www.w3.org/ns/odrl/2/\"\n    },\n    \"@type\": \"ContractRequest\",\n    \"counterPartyAddress\": \"{{PROVIDER_DSP_URL}}/protocol\",\n    \"policy\": {\n        \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n        \"@type\": \"odrl:Offer\",\n        \"@id\": \"{{POLICY_ID_ASSET}}\",\n        \"assigner\": \"{{EDC_PARTICIPANT_ID}}\",\n        \"permission\": [\n            {\n                \"odrl:action\": {\n                    \"@id\": \"odrl:use\"\n                },\n                \"odrl:constraint\": [\n                    {\n                        \"@type\": \"AtomicConstraint\",\n                        \"odrl:leftOperand\": {\n                            \"@id\": \"edc:wetransform_role\"\n                        },\n                        \"odrl:operator\": {\n                            \"@id\": \"odrl:isPartOf\"\n                        },\n                        \"odrl:rightOperand\": \"forest-data-holder\"\n                    }\n                ]\n            },\n            {\n                \"odrl:action\": {\n                    \"@id\": \"odrl:use\"\n                },\n                \"odrl:constraint\": [\n                    {\n                        \"@type\": \"AtomicConstraint\",\n                        \"odrl:leftOperand\": {\n                            \"@id\": \"edc:geofence\"\n                        },\n                        \"odrl:operator\": {\n                            \"@id\": \"odrl:eq\"\n                        },\n                        \"odrl:rightOperand\": {\n                            \"@value\": \"POLYGON ((8.5122367 48.4050197, 8.5303739 48.4004456, 8.5452819 48.4049379, 8.5646695 48.4000718, 8.5742973 48.4037735, 8.5951711 48.4100551, 8.6058205 48.3959917, 8.640327 48.4023885, 8.6554981 48.3945554, 8.6763373 48.4002011, 8.690371 48.3870313, 8.7368658 48.3767577, 8.7573319 48.3816695, 8.7491462 48.3904705, 8.7662151 48.4102384, 8.7716523 48.4162141, 8.7774047 48.4216732, 8.7647081 48.4272574, 8.7700895 48.4378735, 8.7807461 48.4384805, 8.7838505 48.4470819, 8.8106491 48.4583053, 8.8278819 48.4624796, 8.8207844 48.4698998, 8.8135611 48.4683599, 8.7942659 48.4849005, 8.7775698 48.485694, 8.7685666 48.5011402, 8.7561926 48.5035272, 8.7388702 48.5042241, 8.7345171 48.4876054, 8.6934784 48.4839745, 8.6726588 48.5103278, 8.6358459 48.5001974, 8.6068298 48.5043549, 8.5994045 48.5109871, 8.6054351 48.5239125, 8.6307042 48.5369528, 8.6194458 48.5421278, 8.6030343 48.5484183, 8.595801 48.5539429, 8.5867553 48.5451698, 8.5592629 48.5497376, 8.5783164 48.5657932, 8.575655 48.5769189, 8.5620064 48.5686753, 8.5386884 48.5876164, 8.5024878 48.592949, 8.4726257 48.6115764, 8.4670379 48.6060137, 8.4497578 48.6200691, 8.4192114 48.635585, 8.4094455 48.6331536, 8.4098611 48.6396026, 8.3884671 48.6364986, 8.3878245 48.623547, 8.3507285 48.6089112, 8.3593948 48.6000019, 8.3203406 48.5885893, 8.2636952 48.5892507, 8.2224609 48.6028322, 8.2099619 48.6014993, 8.2368901 48.5762915, 8.2281589 48.5629062, 8.2126327 48.5575666, 8.2208895 48.5496582, 8.2135455 48.5467629, 8.2190084 48.5371417, 8.2117129 48.5222734, 8.2214392 48.5033486, 8.2413375 48.4929768, 8.2660383 48.4904497, 8.2703331 48.4793728, 8.2650883 48.4362574, 8.2554476 48.4337513, 8.2551456 48.413533, 8.2413458 48.4112725, 8.2336501 48.4015168, 8.2461862 48.3947751, 8.2474793 48.3848707, 8.2631411 48.3793245, 8.2517313 48.3646195, 8.2911897 48.3573932, 8.300771 48.3494533, 8.3178201 48.3567449, 8.3148684 48.3663379, 8.3297396 48.3865461, 8.360019 48.3765955, 8.3552949 48.3670054, 8.3631506 48.3348403, 8.40395 48.3223928, 8.4316319 48.3227036, 8.4447319 48.3010528, 8.4585669 48.3130478, 8.4943193 48.3138392, 8.4996526 48.3272111, 8.501353 48.3314871, 8.4850071 48.3337349, 8.4849778 48.3416672, 8.4716216 48.3459014, 8.5031057 48.3573319, 8.4861197 48.36805, 8.4847136 48.3818845, 8.5202328 48.3879472, 8.5122367 48.4050197))\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"prohibition\": [],\n        \"obligation\": [],\n        \"target\": \"{{ASSET_ID}}\"\n    },\n    \"protocol\": \"dataspace-protocol-http\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONSUMER_HOST}}/management/v3/contractnegotiations",
							"host": [
								"{{CONSUMER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"contractnegotiations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contract Negotiations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get the contact agreement id and save it as an environment variable",
									"if(pm.response.code < 300 && pm.response.code >= 200 && pm.response.json().length > 0){",
									"    var find_negotiation;",
									"    if (pm.environment.has(\"CONTRACT_NEGOTIATION_ID\")){",
									"        find_negotiation = pm.response.json().find((el) => el[\"@id\"] == pm.environment.get(\"CONTRACT_NEGOTIATION_ID\"))",
									"    }",
									"",
									"    if(find_negotiation){",
									"        const contractAgreementId = find_negotiation[\"contractAgreementId\"];",
									"        pm.environment.set(\"CONTRACT_AGREEMENT_ID\", contractAgreementId);",
									"        console.log(\"CONTRACT_AGREEMENT_ID: \" , pm.environment.get(\"CONTRACT_AGREEMENT_ID\"))",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									"pm.test(\"Contract Agreement ID is set\", function(){",
									"    pm.expect(pm.environment.get(\"CONTRACT_AGREEMENT_ID\")).not.to.be.undefined",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"@context\": [\n        \"https://w3id.org/edc/connector/management/v0.0.1\"\n    ],\n    \"@type\": \"QuerySpec\"\n}"
						},
						"url": {
							"raw": "{{CONSUMER_HOST}}/management/v3/contractnegotiations/request",
							"host": [
								"{{CONSUMER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"contractnegotiations",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate Transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(!pm.environment.has(\"CONTRACT_AGREEMENT_ID\")){",
									"    throw new Error('Contract Agreement ID is not yet available, please execute requests \"Initiate Negotiation and Get Contract Negotiation\" first!');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": [\n        \"https://w3id.org/edc/connector/management/v0.0.1\"\n    ],\n    \"@type\": \"TransferRequestDto\",\n    \"assetId\": \"{{ASSET_ID}}\",\n    \"counterPartyAddress\":  \"{{PROVIDER_DSP_URL}}/protocol\",\n    \n    \"contractId\": \"{{CONTRACT_AGREEMENT_ID}}\",\n    \"dataDestination\": {\n        \"type\": \"HttpData\"\n    },\n     \"privateProperties\": {\n        \"https://w3id.org/edc/v0.0.1/ns/tenantId\": \"default\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"transferType\": \"HttpData-PULL\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONSUMER_HOST}}/management/v3/transferprocesses",
							"host": [
								"{{CONSUMER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"transferprocesses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transfer processes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": [\n        \"https://w3id.org/edc/connector/management/v0.0.1\"\n    ],\n    \"@type\": \"QuerySpec\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{CONSUMER_HOST}}/management/v3/transferprocesses/request",
							"host": [
								"{{CONSUMER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"transferprocesses",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cached EDRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get the transfer process id of \"asset-1\" and save it as an environment variable if the response body is not empty",
									"if(pm.response.code < 300 && pm.response.code >= 200 && pm.response.json().length > 0){",
									"  const transferProcessId = pm.response.json()[0][\"transferProcessId\"];",
									"  pm.environment.set(\"TRANSFER_PROCESS_ID\", transferProcessId);",
									"}",
									"",
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});",
									"pm.test(\"Transfer process id is set\", function(){",
									"    pm.expect(pm.environment.get(\"TRANSFER_PROCESS_ID\")).not.to.be.undefined",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": [\n        \"https://w3id.org/edc/connector/management/v0.0.1\"\n    ],\n    \"@type\": \"QuerySpec\"\n}"
						},
						"url": {
							"raw": "{{CONSUMER_HOST}}/management/v3/edrs/request",
							"host": [
								"{{CONSUMER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"edrs",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get EDR DataAddress for TransferId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(!pm.environment.has(\"TRANSFER_PROCESS_ID\")){",
									"    throw new Error('Transfer Process ID is not yet available, please execute request \"Get Transfer Processes\" first!');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get the authorization token and save it as an environment variable",
									"if(pm.response.code < 300 && pm.response.code >= 200){",
									"  //using the first authorization token found",
									"  const authorization = pm.response.json()[\"authorization\"];",
									"  pm.environment.set(\"AUTHORIZATION\", authorization);",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CONSUMER_HOST}}/management/v3/edrs/{{TRANSFER_PROCESS_ID}}/dataaddress",
							"host": [
								"{{CONSUMER_HOST}}"
							],
							"path": [
								"management",
								"v3",
								"edrs",
								"{{TRANSFER_PROCESS_ID}}",
								"dataaddress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Data from Public API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(!pm.environment.has(\"AUTHORIZATION\")){",
									"    throw new Error(' The authorization token is not yet available, please execute request \"Get EDR DataAddress for TransferId\" first!');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is >=200 and <300\", function () {",
									"    pm.expect(pm.response.code < 300 && pm.response.code >= 200).to.be.true",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AUTHORIZATION}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PROVIDER_PUBLIC_API}}/public",
							"host": [
								"{{PROVIDER_PUBLIC_API}}"
							],
							"path": [
								"public"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "IdentityHub",
			"item": [
				{
					"name": "Participant Context Mgmt API",
					"item": [
						{
							"name": "Get Participant By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all participants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\":[],\n    \"serviceEndpoints\":[],\n    \"active\": true,\n    \"participantId\": \"{{NEW_PARTICIPANT_ID}}\",\n    \"did\": \"{{NEW_PARTICIPANT_ID}}\",\n    \"key\":{\n        \"keyId\": \"key-1\",\n        \"privateKeyAlias\": \"{{NEW_PARTICIPANT_ID}}-alias\",\n        \"keyGeneratorParams\":{\n            \"algorithm\": \"EdDSA\",\n            \"curve\": \"Ed25519\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Participant (existing key)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\":[],\n    \"serviceEndpoints\":[],\n    \"active\": true,\n    \"participantId\": \"{{NEW_PARTICIPANT_ID}}\",\n    \"did\": \"{{NEW_PARTICIPANT_ID}}\",\n    \"key\":{\n        \"keyId\": \"key-1\",\n        \"privateKeyAlias\": \"{{NEW_PARTICIPANT_ID}}-alias\",\n        \"publicKeyPem\":\"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE1l0Lof0a1yBc8KXhesAnoBvxZw5r\\noYnkAXuqCYfNK3ex+hMWFuiXGUxHlzShAehR6wvwzV23bbC0tcFcVgW//A==\\n-----END PUBLIC KEY-----\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"role1\", \"role2\", \"admin\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/roles",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Regenerate Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/token",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\":[],\n    \"serviceEndpoints\":[],\n    \"isActive\": true,\n    \"participantId\": \"foobar\",\n    \"did\": \"did:web:foobar\",\n    \"key\":{\n        \"keyId\": \"key1\",\n        \"privateKeyAlias\": \"foobar-alias\",\n        \"keyGeneratorParams\":{\n            \"algorithm\": \"EC\",\n            \"curve\": \"secp256r1\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/state?isActive=true",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"state"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\":[],\n    \"serviceEndpoints\":[],\n    \"isActive\": true,\n    \"participantId\": \"foobar\",\n    \"did\": \"did:web:foobar\",\n    \"key\":{\n        \"keyId\": \"key1\",\n        \"privateKeyAlias\": \"foobar-alias\",\n        \"keyGeneratorParams\":{\n            \"algorithm\": \"EC\",\n            \"curve\": \"secp256r1\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/state?isActive=false",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"state"
									],
									"query": [
										{
											"key": "isActive",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\":[],\n    \"serviceEndpoints\":[],\n    \"isActive\": true,\n    \"participantId\": \"foobar\",\n    \"did\": \"did:web:foobar\",\n    \"key\":{\n        \"keyId\": \"key1\",\n        \"privateKeyAlias\": \"foobar-alias\",\n        \"keyGeneratorParams\":{\n            \"algorithm\": \"EC\",\n            \"curve\": \"secp256r1\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "KeyPair Resources Mgmt API",
					"item": [
						{
							"name": "Get KeyPair for Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/BPN0000001/keypairs",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"BPN0000001",
										"keypairs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all KeyPairs",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/keypairs",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"keypairs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add KeyPair",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is OK or conflict\", function() {",
											"  pm.expect(pm.response.code).to.be.oneOf([200, 204, 409])",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyId\": \"key6\",\n    \"privateKeyAlias\": \"new-foobar-alias5\",\n    \"keyGeneratorParams\": {\n        \"algorithm\": \"EdDSA\",\n        \"curve\": \"Ed25519\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/keypairs",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"keypairs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rotate key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyId\": \"key2\",\n    \"privateKeyAlias\": \"new-foobar-alias\",\n    \"keyGeneratorParams\": {\n        \"algorithm\": \"EC\",\n        \"curve\": \"secp256r1\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/keypairs/key1/rotate",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"keypairs",
										"key1",
										"rotate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/keypairs/key2/revoke",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"keypairs",
										"key2",
										"revoke"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DID Document Mgmt API",
					"item": [
						{
							"name": "Query DIDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/BPN0000001/dids/query",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"BPN0000001",
										"dids",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All DID Documents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/dids",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"dids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish DID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"did\": \"did:web:BPN0000001\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/dids/publish",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"dids",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"some-other-id\",\n    \"type\": \"CredentialService\",\n    \"serviceEndpoint\": \"https://foobar.myconnector.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/dids/{{DID}}/endpoints",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"dids",
										"{{DID}}",
										"endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "Un-Publish DID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"did\": \"did:web:consumer-identityhub%3A7083:connector1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/dids/unpublish",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"dids",
										"unpublish"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete DID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"did\": \"did:web:consumer-identityhub%3A7083:connector1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/dids",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"dids"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DID Document state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"did\": \"did:web:BPN0000001\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/dids/state",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"dids",
										"state"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is OK\", function() {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 204])",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "VerifiableCredential Mgmt API",
					"item": [
						{
							"name": "Get Credential By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is OK\", function() {",
											"  pm.expect(pm.response.code).to.be.oneOf([200, 204])",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/participants/{{PARTICIPANT_ID}}/credentials/CREDENTIAL-ID",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"participants",
										"{{PARTICIPANT_ID}}",
										"credentials",
										"CREDENTIAL-ID"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is OK\", function() {",
											"  pm.expect(pm.response.code).to.be.oneOf([200, 204])",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CS_URL}}/api/identity/v1alpha/credentials",
									"host": [
										"{{CS_URL}}"
									],
									"path": [
										"api",
										"identity",
										"v1alpha",
										"credentials"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{IH_API_TOKEN}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "X-Api-Key",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is OK or conflict\", function() {",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 204, 409])",
							"})"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "password",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-Api-Key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.request.method == \"POST\" || pm.request.method == \"PUT\"){",
					"    pm.request.headers.add(\"Content-Type: application/json\");",
					"}"
				]
			}
		},
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HOST",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "PROVIDER_DSP",
			"value": "http://localhost:8092",
			"type": "string"
		},
		{
			"key": "PROVIDER_ID",
			"value": "did:web:localhost%3A7093",
			"type": "string"
		},
		{
			"key": "CS_URL",
			"value": "http://localhost:8181",
			"type": "string"
		},
		{
			"key": "IH_API_TOKEN",
			"value": "c3VwZXItdXNlcg==.c3VwZXItc2VjcmV0LWtleQo=",
			"type": "string"
		},
		{
			"key": "PARTICIPANT_ID",
			"value": "super-user"
		},
		{
			"key": "DID",
			"value": "did:web:super-user"
		},
		{
			"key": "NEW_PARTICIPANT_ID",
			"value": "did:web:localhost%3A7083",
			"type": "string"
		},
		{
			"key": "CATALOG_URL",
			"value": "http://localhost:8084",
			"type": "string"
		},
		{
			"key": "TED_DSP_URL",
			"value": "",
			"type": "string"
		}
	]
}